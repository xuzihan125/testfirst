DATE：2020.6.30
任务完成情况：
上午：
·完成python配置
·完成pycharm安装配置
·完成Java JDK配置
·在anaconda开启虚拟环境，并安装完成所需依赖包
·完成spark、hadoop安装并测试安装成功，但pyspark无法运行
下午：
·解决上午未解决的问题，重配python后成功运行pyspark，并配置好相关依赖包
·下载数据资源网站1980至今的北京天气数据
·学习数据清洗操作过程，掌握相关操作，尝试清洗部分天气数据并清洗成功

安装过程踩坑记录：
·安装hadoop后缺少winutils.exe导致报错，重新补全文件后运行成功
·python版本不匹配导致pyspark运行失败，降级至3.6.5后运行成功
·使用anaconda配置pyspark一直无法成功，最终选择使用本地环境配置


DATE: 2020.7.1
任务完成情况：
上午：
·完成VMware与Ubuntu安装，配置成功本地虚拟机
·学习ARIMA模型
下午：
···重要时间点：进入前端学习开发阶段···
·为idea加装Java EE的Web等相关功能包
·学习简单的HTML语法，并成功运行了自己的第一个html网页
·安装并配置Tomcat，并在idea部署成功
·编写.jsp文件并开启Tomcat服务器测试，成功打开网页，在另一台局域网内设备上输入地址后成功打开页面！

踩坑记录：
·安装Ubuntu一定断网安装，安装结束之后换源下载语言包很快
·Tomcat安装的时候端口号默认为-1，导致第一次运行失败。在conf文件夹的server.xml修改后又报错误说网络端口占用，在项目edit configurations设置一下别的端口号终于运行成功（8888果然幸运）！
·Tomcat默认为UTF-8，运行的时候弹出中文日志为乱码（吓死个人，日志是红色字体还以为是疯狂报错），进入conf文件夹修改logging.properties文件的UTF-8为GBK后问题解决！


DATE: 2020.7.2
任务完成情况：
上午：
·继续学习HTML相关知识，基本具备了HTML开发能力
下午：
·重要进展：终于理清了整体数据交互的过程，搞明白了整体结构，在此记录：
 后端处理生成预测数据，并处理为json格式，使用flask通过websocket传输给tomcat，通过web前端展示出来。
 tomcat是服务器，更形象地说是一种容器。
 jsp、spring具有相似的功能，jsp更适合小型网站，但是它只是为了临时写写简单的应用设计的，存在很大的限制。
 因此最终我们决定尝试上spring。
晚上：
·学习json相关知识
·学习spring项目搭建过程
初步搭建springboot应用时，报错：Failed to configure a DataSource: 'url' attribute is not specified and no embedd
问题出在没有配置spring - datasource - url 属性。
解决：在application.properties/或者application.yml文件中添加数据库配置信息：
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/read_data?useUnicode=true&characterEncoding=UTF-8&useSSL=false
    username: root
    password: 123456
    driver-class-name: com.mysql.jdbc.Driver
配置后保存运行成功。


DATE: 2020.7.3
任务完成情况：
上午：
·了解tomcat、spring、flask之间的关系
·学习css基本知识
·开始动手构建静态网页，预计今天能够出一个demo
下午：
·完成网页demo1，已上传。但是还未加入图表。
demo1只是构建了静态的只有文字气温信息的网页，图表功能将在学习echarts使用后在demo2中加入
·idea项目出现问题，重开项目后war包报错，无法打开网页，问题尚未解决，进度停滞...
更新：
在一下午艰苦卓绝的奋斗下，终于正常了...在此记录一下坑：
idea项目没有from module选项是因为在module里没有add web
artifact 的war包报错删掉重建，但是之后神奇的报了404，一直无法解决。
之后选择新开项目直接移植，却发现生成的html除了背景图什么都没了...
然后逐个注释掉找原因，发现是css包link语句的原因，尝试删掉那个语句重新输入一遍居然就好了...大概是程序的问题吧...
经历了一下午又回到最初的起点...接下来继续研究echarts的使用，争取尽快实现demo2
晚上：
·学习echarts的使用
·完成html的demo2构建，加入chart。至此静态网页已经基本构建完成。
踩坑记录：
web项目真的一言难尽，构建过程中多次出现修改代码但是生成结果不变的情况，原因有以下几点：
1.浏览器缓存问题，例如chrome需要通过F12优选Network的disable cache选项
2.tomcat缓存，需要通过删除代码重写、设置configurations、rebuild等方式解决
初学web真的一路都是坑...
明天将继续学习JavaScript的相关知识，以实现网页动态化功能。


DATE: 2020.7.4
任务完成情况：
上午：
·学习JavaScript相关知识
接触到js之后也更清楚地理解了在web前端开发中，HTML、CSS、JavaScript三者之间的关系：
·HTML 定义了网页的内容
·CSS 描述了网页的布局
·JavaScript 网页的行为
通俗一点说，HTML为网页搭建了静态的框架，CSS则是让静态网页看起来更漂亮，而JavaScript就是让网页“动”起来
下午：
·学习并掌握了JavaScript的基本知识，简单进行了一些应用尝试
接下来将尝试在Demo2的基础上通过js增加一些简单的功能
晚上：
·为webdemo增加了部分js功能，实现了日期动态更新
·echarts表格数据动态更新目前尚未解决，还需进一步研究，等解决之后再汇总上传Demo3
·之后还需学习json数据的处理


DATE：2020.7.5
任务完成情况：
上午：
·继续学习js相关知识
·解决昨晚未解决的echarts表格问题
 bug记录：HTML是逐行编译，而且包在很深的代码段里可能导致函数无法运行，window.onload是在网页生成后再调用进行修改，可以解决问题但治标不治本。
 最后选择将函数调用移出代码块，放在外层，调整引用js文件指令位置，问题解决。
·实现文字与图表气温数据同步
·实现图表数据动态更新
·完成websiteDemo3，加入js功能，实现日期、数据的动态更新。
·里程碑：目前前端网页已经基本完全实现，只需获得json数据并处理即可在前端网页正确显示
·下午将学习json数据的处理，准备接收数据相关知识，后期也将帮助进行服务器连接方面的工作。
下午：
·更新网页天气数据
·学习json基本知识，相关语法及处理方法
晚上：
·学习json服务器传输方法
·与后端算法模型同学确定json数据格式及内容，确定生成数据格式的正确性，防止正式读取时发生错误
·学习HTML websocket相关知识


DATE：2020.7.6
任务完成情况：
上午：
·中期展示
·小组召开中期会议，确定下一步工作
下午：
学习HTML表单的使用
·构建登陆界面，编写HTML和CSS文件
·构建注册界面，编写HTML和CSS文件
·在登陆界面创建指向注册界面的超链接
目前所有网页主体已经基本完成，后期只需连接各个网页，构建服务器连接即可
接下来将转向服务器连接方面的研究与实现工作


DATE：2020.7.7
任务完成情况：
上午：
·学习echarts异步数据处理与展示，并在网页实现
·重新调整网页代码结构，完全分离HTML与JavaScript功能
·尝试与django对接
